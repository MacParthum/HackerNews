{"version":3,"sources":["utils/selectFields.js","services/hnApi.js","styles/StoryStyles.js","components/Story.js","containers/StoriesContainer.js","App.js","serviceWorker.js","index.js"],"names":["selectFields","id","by","url","time","title","baseUrl","newStoriesUrl","storyUrl","getStory","storyId","a","axios","get","then","data","result","getStoryIds","StoryWrapper","styled","section","StoryTitle","h1","StoryMeta","div","StoryMetaElement","span","props","color","Story","useState","story","setStory","useEffect","data-testid","href","className","StoriesContainer","storyIds","setStoryIds","map","key","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.03c64a0d.chunk.js","sourcesContent":["export const selectFields =({id, by, url, time, title} = {}) => ({\r\n    id,\r\n    by,\r\n    url,\r\n    time,\r\n    title,\r\n});","import axios from 'axios';\r\n\r\nimport { selectFields } from '../utils/selectFields';\r\nexport const baseUrl = 'https://hacker-news.firebaseio.com/v0/';\r\nexport const newStoriesUrl = `${baseUrl}newstories.json`;\r\nexport const storyUrl = `${baseUrl}item/`;\r\n\r\nexport const getStory = async (storyId) => {\r\n    const result = await axios\r\n    .get (`${storyUrl + storyId}.json`)\r\n    .then(({ data }) => data && selectFields(data));\r\n\r\n    return result;\r\n\r\n}\r\n\r\nexport const getStoryIds = async () => {\r\n    const result = await axios.get(newStoriesUrl).then(({data}) => data);\r\n\r\n    return result;\r\n};","import styled from \"styled-components\";\r\n\r\nexport const StoryWrapper = styled.section`\r\n  padding-top: 10px;\r\n  margin-bottom: 20px;\r\n  border-top: 1px solid #cccccc;\r\n\r\n  &:first-of-type {\r\n    border-top: 0;\r\n  }\r\n\r\n  &:last-of-type {\r\n    margin-bottom: 0;\r\n    padding-bottom: 0;\r\n  }\r\n`;\r\n\r\nexport const StoryTitle = styled.h1`\r\n  margin-bottom: 5px;\r\n  font-size: 18px;\r\n  line-height: 1.8;\r\n  margin: 0;\r\n  text-decoration: none;\r\n\r\n  a {\r\n    color: #2e2e2c;\r\n    background-color: #00ffff;\r\n    text-decoration: none;\r\n  }\r\n`;\r\n\r\nexport const StoryMeta = styled.div`\r\n font-style: italic;\r\n\r\n>span:first-child {\r\n    margin-right: 10px;\r\n }\r\n \r\n> span:not(:first-child): before {\r\n    content: 'â—‹'\r\n    margin: 0 7px;\r\n}\r\n\r\n.story__meta-bold {\r\n    font-wieght: bold;\r\n}\r\n `;\r\n\r\nexport const StoryMetaElement = styled.span`\r\n    font-weight; bold;\r\n    color: ${(props) => props.color || \"blue\"};\r\n`;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { getStory } from \"../services/hnApi\";\r\nimport {\r\n  StoryWrapper,\r\n  StoryTitle,\r\n  StoryMeta,\r\n  StoryMetaElement,\r\n} from \"../styles/StoryStyles\";\r\n\r\nexport const Story = ({ storyId }) => {\r\n  const [story, setStory] = useState({});\r\n\r\n  useEffect(() => {\r\n    getStory(storyId).then((data) => data && data.url && setStory(data));},);\r\n\r\n  return story && story.url ? (\r\n    <StoryWrapper data-testid=\"story\">\r\n\r\n      <StoryTitle>\r\n        <a href={story.url}>{story.title}</a>\r\n      </StoryTitle>\r\n\r\n      <StoryMeta>\r\n        <span data-testid=\"story-by\">\r\n          <StoryMetaElement color=\"000\">By:</StoryMetaElement> {story.by}\r\n        </span>\r\n        <span className=\"story__time\" data-testid=\"story-time\">\r\n          <StoryMetaElement color=\"000\">Posted:</StoryMetaElement> {` `}\r\n          {story.time}\r\n        </span>\r\n      </StoryMeta>\r\n\r\n    </StoryWrapper>\r\n  ) : null;\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { getStoryIds } from \"../services/hnApi\";\r\nimport { Story } from \"../components/Story\";\r\n\r\nexport const StoriesContainer = () => {\r\n  const [storyIds, setStoryIds] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getStoryIds().then((data) => setStoryIds(data));\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <h1>Hacker News Stories</h1>\r\n\r\n      {storyIds.map((storyId) => (\r\n        <Story key={storyId} storyId={storyId} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { StoriesContainer } from './containers/StoriesContainer';\n\nexport const App = () => <StoriesContainer />;\n  \n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport {render} from 'react-dom';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}